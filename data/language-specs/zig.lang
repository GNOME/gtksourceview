<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Authors: Daniel Gomes Vargas, Daniel Gerep Tambine Pinto
 Copyright (C) 2024 Daniel Gomes Vargas <dgv@fastmail.com>
 Copyright (C) 2024 Daniel Gerep Tambine Pinto <daniel.gerep@gmail.com>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, see <http://www.gnu.org/licenses/>.

-->
<language id="zig" name="Zig" version="2.0" _section="Source">
  <metadata>
    <property name="mimetypes">text/x-zig</property>
    <property name="globs">*.zig;*.zon</property>
    <property name="line-comment-start">//</property>
    <property name="suggested-suffix">.zig</property>
  </metadata>

  <styles>
    <style id="comment"           name="Comment"               map-to="def:comment"/>
    <style id="error"             name="Error"                 map-to="def:error"/>
    <style id="string"            name="String"                map-to="def:string"/>
    <style id="char"              name="Character"             map-to="def:character"/>
    <style id="keyword"           name="Keyword"               map-to="def:keyword"/>
    <style id="external"          name="External"              map-to="def:preprocessor"/>
    <style id="type"              name="Data Type"             map-to="def:type"/>
    <style id="escaped-character" name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    name="Floating point number" map-to="def:floating-point"/>
    <style id="number"            name="Number"                map-to="def:number"/>
    <style id="operator" 	  name="Operator" 	       map-to="def:operator"/>
    <style id="binary"            name="Binary number"         map-to="def:base-n-integer"/>
    <style id="decimal"           name="Decimal number"        map-to="def:decimal"/>
    <style id="octal"             name="Octal number"          map-to="def:base-n-integer"/>
    <style id="hexadecimal"       name="Hexadecimal number"    map-to="def:base-n-integer"/>
    <style id="boolean"           name="Boolean value"         map-to="def:boolean"/>
    <style id="builtin-funcs"  	  name="Builtin Functions"     map-to="def:preprocessor"/>
    <style id="builtin-constant"  name="Builtin Constant"      map-to="def:special-constant"/>
  </styles>

  <definitions>
    <define-regex id="escaped-character" extended="true">
      \\([nrt\\'&quot;]|x[0-9a-fA-F]{2}|u{[0-9a-fA-F]{1,6}})
    </define-regex>

    <define-regex id="oct" extended="true">
      0[Oo]?(_?[0-7])+
    </define-regex>

    <define-regex id="dec" extended="true">
      (0|[1-9](_?[0-9])*)
    </define-regex>

    <define-regex id="bin" extended="true">
      0[Bb](_?[01])+
    </define-regex>

    <define-regex id="hex" extended="true">
      0[Xx](_?[0-9A-Fa-f])+
    </define-regex>

    <context id="operators" style-ref="operator" extend-parent="false">
      <match>[-.~^,:/%|\=\+\*\!\?&amp;&lt;&gt;]</match>
    </context>

    <context id="builtin-funcs" style-ref="builtin-funcs" extend-parent="false">
      <match extended="true">@[_a-zA-Z][_a-zA-Z0-9]*\b</match>
    </context>

    <context id="comment" style-ref="comment" end-at-line-end="true" class-disabled="no-spell-check">
      <start>//</start>
      <include>
        <context ref="def:in-line-comment"/>
      </include>
    </context>

    <context id="long-string" style-ref="string" end-at-line-end="true" class-disabled="no-spell-check">
      <start>\\</start>
      <include>
        <context ref="def:string"/>
      </include>
    </context>

    <context id="quoted-string" style-ref="string" end-at-line-end="true" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match>'(\%{escaped-character}|.)'</match>
    </context>

    <define-regex id="float" extended="true">
      ((\.[0-9](_?[0-9])* | [0-9](_?[0-9])*\.[0-9]?(_?[0-9])*) ([Ee][+-]?[0-9](_?[0-9])*)? |
      ([0-9](_?[0-9])*[Ee][+-]?[0-9](_?[0-9])*) |
      0[Xx]_?(\.[0-9A-Fa-f](_?[0-9A-Fa-f])* | [0-9A-Fa-f](_?[0-9A-Fa-f])*\.?([0-9A-Fa-f](_?[0-9A-Fa-f])*)?)[Pp][+-]?[0-9](_?[0-9])*
      )
    </define-regex>

    <context id="number" style-ref="number">
      <match>\b[0-9]+\b|(?&lt;![\w\.])(\%{float}|\%{oct}|\%{bin}|\%{hex}|\%{dec})[i]\b</match>
    </context>

    <context id="float" style-ref="floating-point">
      <match>(?&lt;![\w\.])\%{float}(?![\w\.])</match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
        (?&lt;![\w\.])
        \%{hex}
        (?![\w\.])
      </match>
    </context>

    <context id="binary" style-ref="binary">
      <match extended="true">
        (?&lt;![\w\.])
        \%{bin}
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-hexadecimal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]*[ghj-zGHJ-Z][a-zA-Z0-9]*
        (?![\w\.])
      </match>
    </context>

    <context id="octal" style-ref="octal">
      <match extended="true">
        (?&lt;![\w\.])
        \%{oct}
        (?![\w\.])
      </match>
    </context>

    <context id="invalid-octal" style-ref="error">
      <match extended="true">
        (?&lt;![\w\.])
        0[Oo]?[0-7]*[89][0-9]*
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        \%{dec}
        (?![\w\.])
      </match>
    </context>

    <context id="boolean" style-ref="boolean">
      <match extended="true">
        (?&lt;![\w\.])
        (true|false)
        (?![\w\.])
      </match>
    </context>

    <context id="keywords" style-ref="keyword">
        <keyword>align</keyword>
        <keyword>and</keyword>
        <keyword>anyerror</keyword>
        <keyword>asm</keyword>
        <keyword>async</keyword>
        <keyword>await</keyword>
        <keyword>break</keyword>
        <keyword>cancel</keyword>
        <keyword>catch</keyword>
        <keyword>comptime</keyword>
        <keyword>const</keyword>
        <keyword>continue</keyword>
        <keyword>defer</keyword>
        <keyword>else</keyword>
        <keyword>enum</keyword>
        <keyword>errdefer</keyword>
        <keyword>error</keyword>
        <keyword>export</keyword>
        <keyword>extern</keyword>
        <keyword>fn</keyword>
        <keyword>for</keyword>
        <keyword>if</keyword>
        <keyword>inline</keyword>
        <keyword>nakedcc</keyword>
        <keyword>noalias</keyword>
        <keyword>or</keyword>
        <keyword>orelse</keyword>
        <keyword>packed</keyword>
        <keyword>pub</keyword>
        <keyword>resume</keyword>
        <keyword>return</keyword>
        <keyword>section</keyword>
        <keyword>stdcallcc</keyword>
        <keyword>struct</keyword>
        <keyword>suspend</keyword>
        <keyword>switch</keyword>
        <keyword>test</keyword>
        <keyword>this</keyword>
        <keyword>try</keyword>
        <keyword>union</keyword>
        <keyword>unreachable</keyword>
        <keyword>use</keyword>
        <keyword>var</keyword>
        <keyword>volatile</keyword>
        <keyword>while</keyword>
    </context>

    <context id="types" style-ref="type">
        <keyword>bool</keyword>
        <keyword>c_int</keyword>
        <keyword>c_long</keyword>
        <keyword>c_longlong</keyword>
        <keyword>c_longdouble</keyword>
        <keyword>c_short</keyword>
        <keyword>c_uint</keyword>
        <keyword>c_ulong</keyword>
        <keyword>c_ulonglong</keyword>
        <keyword>c_ushort</keyword>
        <keyword>c_void</keyword>
        <keyword>f16</keyword>
        <keyword>f32</keyword>
        <keyword>f64</keyword>
        <keyword>f128</keyword>
        <keyword>i2</keyword>
        <keyword>i3</keyword>
        <keyword>i4</keyword>
        <keyword>i5</keyword>
        <keyword>i6</keyword>
        <keyword>i7</keyword>
        <keyword>i8</keyword>
        <keyword>i16</keyword>
        <keyword>i29</keyword>
        <keyword>i32</keyword>
        <keyword>i64</keyword>
        <keyword>i128</keyword>
        <keyword>isize</keyword>
        <keyword>noreturn</keyword>
        <keyword>promise</keyword>
        <keyword>type</keyword>
        <keyword>u2</keyword>
        <keyword>u3</keyword>
        <keyword>u4</keyword>
        <keyword>u5</keyword>
        <keyword>u6</keyword>
        <keyword>u7</keyword>
        <keyword>u8</keyword>
        <keyword>u16</keyword>
        <keyword>u29</keyword>
        <keyword>u32</keyword>
        <keyword>u64</keyword>
        <keyword>u128</keyword>
        <keyword>usize</keyword>
        <keyword>void</keyword>
    </context>

    <context id="builtin-constant" style-ref="builtin-constant">
      <keyword>false</keyword>
      <keyword>null</keyword>
      <keyword>true</keyword>
      <keyword>undefined</keyword>
    </context>

    <context id="zig" class="no-spell-check">
      <include>
        <context ref="comment"/>
        <context ref="long-string"/>
        <context ref="quoted-string"/>
        <context ref="char"/>
        <context ref="binary"/>
        <context ref="float"/>
        <context ref="hexadecimal"/>
        <context ref="number"/>
        <context ref="invalid-hexadecimal"/>
        <context ref="octal"/>
        <context ref="invalid-octal"/>
        <context ref="decimal"/>
        <context ref="boolean"/>
        <context ref="operators"/>
        <context ref="keywords"/>
        <context ref="types"/>
        <context ref="builtin-funcs"/>
        <context ref="builtin-constant"/>
      </include>
    </context>

  </definitions>
</language>
