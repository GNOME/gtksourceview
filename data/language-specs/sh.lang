<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Author: Silian Della Ragione <silian87@gechi.it>
 Copyright (C) 2005 Silian Della Ragione <silian87@gechi.it>
 Copyright (C) 2008 Steve Fr√©cinaux <code@istique.net>

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with this library; if not, see <http://www.gnu.org/licenses/>.

-->
<language id="sh" name="sh" version="2.0" _section="Script">
  <metadata>
    <property name="mimetypes">text/x-shellscript;application/x-shellscript;text/x-sh</property>
    <property name="globs">*.sh;*bashrc;.profile;.bash_profile</property>
    <property name="line-comment-start">#</property>
  </metadata>

  <styles>
    <style id="comment"             name="Comment"             map-to="def:comment"/>
    <style id="function"            name="Function"            map-to="def:function"/>
    <style id="string"              name="String"              map-to="def:string"/>
    <style id="keyword"             name="Keyword"             map-to="def:keyword"/>
    <!-- FIXME: need to sort out proper styles for variables -->
    <style id="variable"            name="Variable"            map-to="def:type"/>
    <style id="variable-definition" name="Variable Definition" map-to="sh:variable"/>
    <style id="others"              name="Others"              map-to="def:keyword"/>
    <style id="here-doc-bound"      name="Heredoc Bound"       map-to="def:keyword"/>
    <style id="subshell"            name="Subshell"            map-to="def:preprocessor"/>
  </styles>

<keyword-char-class>[^()`&amp;|;]</keyword-char-class>

  <definitions>

    <define-regex id="identifier">[a-zA-Z_][a-zA-Z0-9_]*</define-regex>
    <define-regex id="unescaped-space">(?&lt;!\\)\s</define-regex>

    <!-- we cannot use def:shell-like-comment, because
         m4.lang needs to replace this context -->
    <context id="line-comment" style-ref="comment" end-at-line-end="true" class="comment" class-disabled="no-spell-check">
      <start>(?&lt;=\s|^)#</start>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="double-quoted-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>"</start>
      <end>"</end>
      <include>
        <!-- highlight escaped chars -->
        <context style-ref="def:special-char">
            <match>\\[$`"\\]</match>
        </context>
        <context ref="def:line-continue"/>
        <context ref="variable"/>
        <context ref="backtick-subshell"/>
        <context ref="command-substitution"/>
      </include>
    </context>

    <context id="single-quoted-string" style-ref="string" class="string" class-disabled="no-spell-check">
      <start>'</start>
      <end>'</end>
    </context>

    <context id="subshell" style-ref="subshell">
      <start>(?&lt;=\%{unescaped-space}|[`&amp;|;]|^)\((?!\()</start>
      <end>\)(?=\s|[`&amp;|;]|$)</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="keyword"/>
        <context sub-pattern="0" where="end" style-ref="keyword"/>
        <context ref="sh"/>
      </include>
    </context>

    <context id="command-substitution" style-ref="subshell">
      <start>\$\((?!\()</start>
      <end>\)</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="keyword"/>
        <context sub-pattern="0" where="end" style-ref="keyword"/>
        <context ref="sh"/>
      </include>
    </context>

    <!-- Treated separately, not including itself nor command-like contexts
      (see https://gitlab.gnome.org/GNOME/gtksourceview/issues/94) -->
    <context id="backtick-subshell" style-ref="subshell">
      <start>`</start>
      <end>`</end>
      <include>
        <context ref="line-comment"/>
        <context ref="def:line-continue"/>
        <context ref="def:escape"/>
        <context ref="single-quoted-string"/>
        <context ref="double-quoted-string"/>
        <context ref="subshell"/>
        <context ref="command-substitution"/>
        <context ref="punctuator"/>
        <context ref="function"/>
        <context ref="here-doc"/>
        <context ref="redirection"/>
        <context ref="operator"/>
        <context ref="variable"/>
        <context ref="stand-alone-variable-definition"/>
        <context ref="built-in-command"/>
      </include>
    </context>

    <context id="punctuator" style-ref="others">
      <match>[&amp;|;/]</match>
    </context>

    <context id="function" style-ref="function">
      <match>(?&lt;=\%{unescaped-space}|\%[)\%{identifier}\s*\(\)</match>
    </context>

    <context id="redirection" style-ref="others">
      <prefix></prefix>
      <suffix></suffix>
      <!-- The order of the two following keywords matters -->
      <keyword>([0-9]+)?[&lt;&gt;](&amp;)?([0-9]+)?-?</keyword>
      <keyword>(&amp;|[0-9]+)?&gt;{1,2}([0-9]+)?-?</keyword>
      <keyword>([0-9]+)?(&lt;&gt;|&gt;\|)</keyword>
    </context>

    <context id="here-doc">
      <start extended="true" dupnames="true">
        # (?&lt;!&lt;) and [^\s&lt;] are for not matching
        # here-word (&lt;&lt;&lt;)
        (?&lt;!&lt;)
        &lt;&lt;-?\s*\\?(
          \"(?P&lt;HDB&gt;[^\s&lt;]+)\" | # "EOF"
          \'(?P&lt;HDB&gt;[^\s&lt;]+)\' | # 'EOF'
          (?P&lt;HDB&gt;[^\s&lt;]+)       # EOF
        )$
      </start>
      <end>^\t*\%{HDB@start}$</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="here-doc-bound"/>
        <context sub-pattern="0" where="end" style-ref="here-doc-bound"/>
      </include>
    </context>

    <context id="operator" style-ref="function">
      <keyword>\-a\b</keyword>
      <keyword>\-b\b</keyword>
      <keyword>\-c\b</keyword>
      <keyword>\-d\b</keyword>
      <keyword>\-e\b</keyword>
      <keyword>\-f\b</keyword>
      <keyword>\-g\b</keyword>
      <keyword>\-h\b</keyword>
      <keyword>\-k\b</keyword>
      <keyword>\-p\b</keyword>
      <keyword>\-r\b</keyword>
      <keyword>\-s\b</keyword>
      <keyword>\-t\b</keyword>
      <keyword>\-u\b</keyword>
      <keyword>\-w\b</keyword>
      <keyword>\-x\b</keyword>
      <keyword>\-O\b</keyword>
      <keyword>\-G\b</keyword>
      <keyword>\-L\b</keyword>
      <keyword>\-S\b</keyword>
      <keyword>\-N\b</keyword>
      <keyword>\-nt\b</keyword>
      <keyword>\-ot\b</keyword>
      <keyword>\-ef\b</keyword>
      <keyword>\-o\b</keyword>
      <keyword>\-z\b</keyword>
      <keyword>\-n\b</keyword>
      <keyword>&lt;</keyword>
      <keyword>&gt;</keyword>
      <keyword>\!=</keyword>
      <keyword>\-eq\b</keyword>
      <keyword>\-ne\b</keyword>
      <keyword>\-lt\b</keyword>
      <keyword>\-le\b</keyword>
      <keyword>\-gt\b</keyword>
      <keyword>\-ge\b</keyword>
    </context>

    <context id="short-parameter-expansion" style-ref="variable">
      <match>\$([-!@?*#\$0-9]|\%{identifier})</match>
    </context>

    <context id="parameter-expansion" style-ref="def:statement" style-inside="true">
      <start extended="true">
        \$\{ (
          [-@?*\$0-9]
          | [!#]? ( \%{identifier} (\[ ([@*]|-?[0-9]+) \])? )?
        )
      </start>
      <end>\}</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="variable"/>
        <context sub-pattern="0" where="end" style-ref="variable"/>
        <context ref="def:escape"/>
        <context ref="def:line-continue"/>
        <context ref="single-quoted-string"/>
        <context ref="double-quoted-string"/>
        <context ref="variable"/>
        <context ref="backtick-subshell"/>
        <context ref="command-substitution"/>
      </include>
    </context>

    <context id="variable">
      <include>
        <context ref="short-parameter-expansion"/>
        <context ref="parameter-expansion"/>
      </include>
    </context>

    <context id="stand-alone-variable-definition">
      <match>(?&lt;=\%{unescaped-space}|\%[)(\%{identifier})\+?=</match>
      <include>
        <context sub-pattern="1" style-ref="variable-definition"/>
      </include>
    </context>

    <context id="variable-definition-command" end-at-line-end="true">
      <start extended="true">
        (?&lt;=\%{unescaped-space}|\%[)
        (declare|local|typeset|readonly|export)
        (?=\s|\%])
      </start>
      <end>\%]</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="keyword"/>
        <context sub-pattern="0" where="end" style-ref="keyword"/>
        <context ref="def:escape"/>
        <context ref="def:line-continue"/>
        <context ref="line-comment"/>
        <context ref="single-quoted-string"/>
        <context ref="double-quoted-string"/>
        <context ref="here-doc"/>
        <context ref="redirection"/>
        <context ref="backtick-subshell"/>
        <context ref="command-substitution"/>
        <context ref="variable"/>
        <context style-ref="variable-definition">
          <match>(?&lt;=\%{unescaped-space})\%{identifier}</match>
        </context>
      </include>
    </context>

    <context id="variable-definition">
      <include>
        <context ref="stand-alone-variable-definition"/>
        <context ref="variable-definition-command"/>
      </include>
    </context>

    <context id="built-in-command-1" style-ref="keyword">
      <prefix>(?&lt;=\%{unescaped-space}|\%[)</prefix>
      <suffix>(?=\s|\%])</suffix>
      <keyword>\!</keyword>
      <keyword>\{</keyword>
      <keyword>\}</keyword>
      <keyword>\:</keyword>
    </context>

    <!-- To prevent conflicts, keywords below should be removed from the list
         before being used in any container context -->
    <context id="built-in-command-2" style-ref="keyword">
      <prefix>(?&lt;=\%{unescaped-space}|\%[)</prefix>
      <suffix>(?=\s|\%])</suffix>
      <keyword>do</keyword>
      <keyword>done</keyword>
      <keyword>elif</keyword>
      <keyword>else</keyword>
      <keyword>fi</keyword>
      <keyword>function</keyword>
      <keyword>if</keyword>
      <keyword>in</keyword>
      <keyword>select</keyword>
      <keyword>then</keyword>
      <keyword>until</keyword>
      <keyword>while</keyword>
      <keyword>test</keyword>
      <keyword>times</keyword>
    </context>

    <context id="case-command">
      <start>(?&lt;=\%{unescaped-space}|\%[)case(?=\s)</start>
      <end>(?&lt;=\%{unescaped-space}|\%[)esac(?=\s|\%])</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="keyword"/>
        <context sub-pattern="0" where="end" style-ref="keyword"/>
        <context ref="sh"/>
      </include>
    </context>

    <context id="for-command" end-at-line-end="true">
      <start>(?&lt;=\%{unescaped-space}|\%[)for(?=\s)</start>
      <end>(?=\S)</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="keyword"/>
        <context ref="def:line-continue"/>
        <context style-ref="variable-definition" once-only="true">
          <match>\%{identifier}</match>
        </context>
      </include>
    </context>

    <context id="built-in-command">
      <include>
        <context ref="built-in-command-1"/>
        <context ref="built-in-command-2"/>
        <context ref="case-command"/>
        <context ref="for-command"/>
      </include>
    </context>

    <define-regex id="builtin-command" extended="true">
      \.
      | alias
      | bg
      | bind
      | break
      | builtin
      | cd
      | command
      | compgen
      | complete
      | continue
      | dirs
      | disown
      | echo
      | enable
      | eval
      | exec
      | exit
      | fc
      | fg
      | getopts
      | hash
      | help
      | history
      | jobs
      | let
      | logout
      | popd
      | printf
      | pushd
      | read
      | return
      | set
      | shift
      | shopt
      | source
      | suspend
      | trap
      | type
      | ulimit
      | umask
      | unalias
      | unset
      | wait
    </define-regex>
    <define-regex id="common-command" extended="true">
      ar
      | awk
      | basename
      | bash
      | beep
      | bunzip2
      | bzcat
      | bzcmp
      | bzdiff
      | bzegrep
      | bzfgrep
      | bzgrep
      | bzip2recover
      | bzip2
      | bzless
      | bzmore
      | cc
      | cat
      | chattr
      | chgrp
      | chmod
      | chown
      | chroot
      | clear
      | cmp
      | cpp
      | cp
      | cut
      | date
      | dd
      | df
      | dialog
      | diff3
      | diff
      | dirname
      | dir
      | du
      | egrep
      | eject
      | env
      | expr
      | false
      | fgrep
      | file
      | find
      | fmt
      | free
      | ftp
      | funzip
      | fuser
      | gawk
      | gcc
      | getent
      | getopt
      | grep
      | groups
      | gunzip
      | gzip
      | head
      | hostname
      | id
      | ifconfig
      | info
      | insmod
      | install
      | join
      | killall
      | kill
      | lastb
      | last
      | ld
      | less
      | ln
      | locate
      | lockfile
      | login
      | logname
      | lp
      | lpr
      | lsattr
      | ls
      | lsmod
      | make
      | man
      | mkdir
      | mkfifo
      | mknod
      | mktemp
      | modprobe
      | more
      | mount
      | mv
      | namei
      | nawk
      | nice
      | nl
      | passwd
      | patch
      | perl
      | pgawk
      | pidof
      | ping
      | pkg-config
      | pr
      | ps
      | pwd
      | readlink
      | renice
      | rmdir
      | rm
      | scp
      | sed
      | seq
      | sh
      | sleep
      | sort
      | split
      | ssh-add
      | ssh-agent
      | ssh-keygen
      | ssh-keyscan
      | ssh
      | stat
      | sudo
      | sum
      | su
      | sync
      | tac
      | tail
      | tar
      | tee
      | tempfile
      | touch
      | true
      | tr
      | umount
      | uname
      | uniq
      | unlink
      | unzip
      | uptime
      | wall
      | wc
      | wget
      | whereis
      | which
      | whoami
      | who
      | write
      | w
      | xargs
      | xdialog
      | zcat
      | zcmp
      | zdiff
      | zegrep
      | zenity
      | zfgrep
      | zforce
      | zgrep
      | zip
      | zless
      | zmore
      | znew
    </define-regex>
    <context id="generic-command" end-at-line-end="true">
      <start extended="true">
        (?&lt;=\%{unescaped-space}|\%[) (
          \%{builtin-command} | \%{common-command}
        ) (?=\s|\%])
      </start>
      <end>\%]</end>
      <include>
        <context sub-pattern="0" where="start" style-ref="keyword"/>
        <context sub-pattern="0" where="end" style-ref="keyword"/>
        <context ref="def:escape"/>
        <context ref="def:line-continue"/>
        <context ref="line-comment"/>
        <context ref="single-quoted-string"/>
        <context ref="double-quoted-string"/>
        <context ref="here-doc"/>
        <context ref="redirection"/>
        <context ref="backtick-subshell"/>
        <context ref="command-substitution"/>
        <context ref="variable"/>
      </include>
    </context>

    <context id="sh" class="no-spell-check">
      <include>
        <context ref="def:shebang"/>
        <context ref="line-comment"/>
        <context ref="def:line-continue"/>
        <context ref="def:escape"/>
        <context ref="single-quoted-string"/>
        <context ref="double-quoted-string"/>
        <context ref="subshell"/>
        <context ref="backtick-subshell"/>
        <context ref="command-substitution"/>
        <context ref="punctuator"/>
        <context ref="function"/>
        <context ref="here-doc"/>
        <context ref="redirection"/>
        <context ref="operator"/>
        <context ref="variable"/>
        <context ref="variable-definition"/>
        <context ref="built-in-command"/>
        <context ref="generic-command"/>
      </include>
    </context>

  </definitions>
</language>
